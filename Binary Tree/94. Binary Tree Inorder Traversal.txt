-------- method 1 (Recursive Method) --------

class Solution {
public:
    void solve(TreeNode* root, vector<int>& ans){
        if(root==NULL) return;
        solve(root->left, ans);
        ans.push_back(root->val);  //In
        solve(root->right, ans);   
    }

    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> ans;
        solve(root,ans);
        return ans;
    }
};

-------- method 2 (Iterative Method) --------

class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int>v;
        stack<TreeNode*> s;
        TreeNode* node = root;
        while(s.size() != 0 || node != NULL){
            if(node != NULL){
                s.push(node);
                node = node->left;
            }

            else{
                TreeNode* temp = s.top();
                s.pop();
                v.push_back(temp->val);
                node = temp->right;
            }
        }
        return v;
    }
};

-------- method 3 (Morris Traversal Method ) --------
// Best Method because the Space Complexity = O(1)

class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        TreeNode* curr = root;
        vector<int>v;

        while(curr!=NULL){
            
            if(curr->left != NULL){
                TreeNode* pred = curr->left;
                while((pred->right != NULL) && (pred->right != curr)) pred = pred->right;

                if(pred->right == NULL){  // link
                    pred->right = curr;
                    curr = curr->left;
                }

                else{  // pred->right == curr (unlink)
                    pred->right = NULL;
                    v.push_back(curr->val);
                    curr = curr->right;
                }
            }

            else{  //curr->left == NULL
                v.push_back(curr->val);
                curr = curr->right;
            }
        }
        return v;
    }
};
