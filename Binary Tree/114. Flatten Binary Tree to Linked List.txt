-------- method 1 (Preorder Vector) --------
// T.C = O(n)
// S.C = O(n)

class Solution {
public:

    vector<TreeNode*> preorder(TreeNode* root, vector<TreeNode*> &ans){
        if(root==NULL) return ans;
        ans.push_back(root);
        preorder(root->left,ans);
        preorder(root->right,ans);
        return ans;
    }

    void flatten(TreeNode* root) {
        vector<TreeNode*> ans;
        preorder(root,ans);
        int n = ans.size();
        for(int i=0; i<n-1; i++){
            ans[i]->right = ans[i+1];
            ans[i]->left = NULL;
        }
        return;
    }
};

-------- method 2 (Recursive Method) --------
// T.C = O(n)
// S.C = O(n)

class Solution {
public:
    void flatten(TreeNode* root) {
        if(root==NULL) return;
        flatten(root->left);
        flatten(root->right);
        TreeNode* r = root->right;
        root->right = root->left;
        root->left = NULL;
        TreeNode* temp = root;
        while(temp->right != NULL) temp = temp->right;
        temp->right = r;
    }
};

-------- method 3 (Using Morris Traversal Method) --------
// T.C = O(n)
// S.C = O(1)

class Solution {
public:
    void flatten(TreeNode* root) {
        if(root==NULL) return;
        TreeNode* curr = root;
        while(curr != NULL){
            if(curr->left != NULL){
                TreeNode* r = curr->right;
                curr->right = curr->left;
                TreeNode* temp = curr->left;
                while(temp->right != NULL) temp = temp->right;
                temp->right = r;
                curr = curr->left;
            }

            else curr = curr->right;
        }
        TreeNode* temp = root;
        while(temp->right != NULL){
            temp->left = NULL;
            temp = temp->right;
        }
        return;
    }
};