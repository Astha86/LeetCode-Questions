class Solution {
public:
    
    vector<vector<int> > dir = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}}; // i, j -> i+1, j -> i-1, j -> i, j-1 -> i, j+1
    int r;
    int c;
    vector<vector<int> > h;
    
    vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights) {
        r = heights.size();
        c = heights[0].size();
        h = heights;

        queue<pair<int, int> > pacificbfs;
        queue<pair<int, int> > atlanticbfs;
        
        // multisource bfs
        for(int i=0; i<r; i++) {
            pacificbfs.push({i, 0});
            atlanticbfs.push({i, c-1});
        }
        
        for(int j=1; j<c; j++) {
            pacificbfs.push({0, j});
        }
        
        for(int j=0; j<c-1; j++) {
            atlanticbfs.push({r-1, j});
        }
        
        vector<vector<bool> > pacific = bfs(pacificbfs);
        vector<vector<bool> > atlantic = bfs(atlanticbfs);
        
        vector<vector<int> > ans;
        for(int i=0; i<r; i++) {
            for(int j=0; j<c; j++) {
                if(pacific[i][j] && atlantic[i][j]) ans.push_back({i, j});
            }
        }
        return ans;
    }
    
    vector<vector<bool> > bfs(queue<pair<int, int> > &q) {
        vector<vector<bool> > visited(r, vector<bool> (c, false));
        while(not q.empty()) {
            auto cell = q.front();
            q.pop();
            int i = cell.first;
            int j = cell.second;
            visited[i][j] = true;

            for(int d=0; d<4; d++) {
                int newRow = i+dir[d][0];
                int newCol = j+dir[d][1];

                if(newRow<0 || newCol<0 || newRow>=r || newCol>=c) continue; 
                if(visited[newRow][newCol]) continue;
                if(h[newRow][newCol] >= h[i][j]) q.push({newRow, newCol});  //means water can flow in that cell
            }
        }
        return visited;
    }
};