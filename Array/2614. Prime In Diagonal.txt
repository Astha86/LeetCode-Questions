class Solution {
public:

    bool prime(int x){
        if(x==1) return false;
        for(int i=2; i<=sqrt(x); i++){  // O(n^1/2)
            if(x%i == 0) return false;
        }
        return true;
    } 

    int diagonalPrime(vector<vector<int>>& nums) {
        int maxi = 0;
        int n = nums.size();
        for(int i=0; i<n; i++){  // O(n)
            if(prime(nums[i][i])){
                maxi = max(maxi,nums[i][i]);
            }
            if(prime(nums[i][n-i-1])){
                maxi = max(maxi,nums[i][n-i-1]);
            }
        }
        return maxi;
    }
};

//Total Time Complexity = O(n* root n) = O(n^3/2)