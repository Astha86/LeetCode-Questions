class Solution {
public:

    void sieve(vector<bool>& grid){
        int n = grid.size();
        for(int i=2; i<=sqrt(n); i++){
            for(int j=i*2; j<n; j+=i) grid[j] = 0;
            //composite indices pe 0 fill kr rhe h 
        }
    }

    int distinctPrimeFactors(vector<int>& nums) {
        int n = nums.size();
        int maxi = -1;
        for(int i=0; i<n; i++){
            maxi = max(maxi,nums[i]);
        }
        vector<bool> grid(maxi+1,1);
        grid[0] = 0;
        grid[1] = 0;
        sieve(grid);
        vector<int> prime;
        for(int i=2; i<=maxi; i++){
            if(grid[i]==1) prime.push_back(i);
        }

        vector<bool> mark(prime.size(),0);
        for(int i=0; i<nums.size(); i++){
            for(int j=0; j<prime.size(); j++){
                if(prime[j]>nums[i]) break;
                if(nums[i]%prime[j]==0) mark[j] = 1;
            }
        }
        int count = 0;
        for(int i=0; i<mark.size(); i++){
            if(mark[i]==1) count++;
        }
        return count;
    }
};