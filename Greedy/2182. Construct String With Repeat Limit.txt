class Solution{
public:
    string repeatLimitedString(string s, int k){
        int n = s.size();
        unordered_map<char,int> m;

        for(int i=0; i<n; i++){
            m[s[i]]++;
        }

        priority_queue<pair<char,int>> pq;
        for(auto p : m){
            pq.push(p);
        }

        string ans="";
        while(!pq.empty()){
            auto largest = pq.top();
            pq.pop();
            int len = min(k,largest.second);

            for(int i=0; i<len; i++){
                ans+=largest.first;
            }

            largest.second -= len;

            if(largest.second!=0){
                if( !pq.empty()){
                    auto secLargest = pq.top();
                    pq.pop();
                    ans += secLargest.first;
                    secLargest.second--;
                    if(secLargest.second!=0) pq.push({secLargest.first, secLargest.second});
                }

                else{
                    return ans;
                }

                pq.push({largest.first, largest.second});
            }
        }
        return ans;
    }
};