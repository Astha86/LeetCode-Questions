-------- method 1 (Brute Force Approach) --------
// T.C = O(n^2)

class Solution {
public:
    int maximumNumberOfStringPairs(vector<string>& words) {
        int n = words.size();
        int count = 0;
        for(int i=0; i<n-1; i++){  // O(n)
            string x = words[i];
            reverse(x.begin(),x.end());
            for(int j=i+1; j<n; j++){  // O(n)
                if(x==words[j]) count++;
            }
        }
        return count;
    }
};

-------- method 2 (Using Hashsets) --------
// T.C = O(n)

class Solution {
public:
    int maximumNumberOfStringPairs(vector<string>& words) {
        int n = words.size();
        int count = 0;
        unordered_set<string>s;
        for(int i=0; i<n-1; i++){ 
            s.insert(words[i]); 
        }

        for(int i=0; i<n; i++){  // O(n)
            string x = words[i];
            reverse(x.begin(),x.end());
            if(s.find(x)!=s.end() && x!=words[i]){
                count++;
                s.erase(words[i]);
            }
        }
        return count;
    }
};

-------- method 3 (Using Hashsets by different Approach) --------
// T.C = O(n) - Best Method

class Solution {
public:
    int maximumNumberOfStringPairs(vector<string>& words) {
        int n = words.size();
        int count = 0;
        unordered_set<string>s;
        for(int i=0; i<n; i++){  // O(n)
            string x = words[i];
            reverse(x.begin(),x.end());
            if(s.find(x)!=s.end()) count++;
            else s.insert(words[i]);
        }

        
        return count;
    }
};