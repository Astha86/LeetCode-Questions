// ------------1st Method------------

class Solution {
public:

    double dp[30][30][108];

    double helper(int n, int i, int j, int k){
        if(i<0 || j<0 || i>=n || j>=n ) return 0;
        if(k==0) return 1;
        if(dp[i][j][k] > -0.8) return dp[i][j][k];

        double ans = 0;
        ans += helper(n, i+1, j+2, k-1) * 0.125;
        ans += helper(n, i+2, j+1, k-1) * 0.125;
        ans += helper(n, i-1, j+2, k-1) * 0.125;
        ans += helper(n, i-2, j+1, k-1) * 0.125;
        ans += helper(n, i+1, j-2, k-1) * 0.125;
        ans += helper(n, i+2, j-1, k-1) * 0.125;
        ans += helper(n, i-1, j-2, k-1) * 0.125;
        ans += helper(n, i-2, j-1, k-1) * 0.125;

        return dp[i][j][k] = ans;
    }

    double knightProbability(int n, int k, int row, int column) {
        memset(dp, -1, sizeof(dp));
        return helper(n,row,column,k);
    }
};


// ------------2nd Method------------

class Solution {
public:

    double dp[30][30][108];
    int dx[8] = {1,2,-1,-2,1,2,-1,-2};
    int dy[8] = {2,1,2,1,-2,-1,-2,-1};

    double helper(int n, int i, int j, int k){
        if(i<0 || j<0 || i>=n || j>=n ) return 0;
        if(k==0) return 1;
        if(dp[i][j][k] > -0.8) return dp[i][j][k];

        double ans = 0;
        for(int m=0; m<=7; m++){
            ans += helper(n, i+dx[m], j+dy[m], k-1) * 0.125;
        }

        return dp[i][j][k] = ans;
    }

    double knightProbability(int n, int k, int row, int column) {
        memset(dp, -1, sizeof(dp));
        return helper(n,row,column,k);
    }
};