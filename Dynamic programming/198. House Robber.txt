// Recursion + Memoization (TOP Down DP) --- Method 1 

class Solution {
public:
    vector<int>dp;
    int helper(vector<int>& nums, int i){
        if(i==nums.size()-1) return nums[i];
        else if(i==nums.size()-2) return max(nums[i],nums[i+1]);
        else if(dp[i] != -1) return dp[i];
        return dp[i] = max((nums[i]+helper(nums,i+2)) , (helper(nums,i+1)));
    }

    int rob(vector<int>& nums) {
        dp.resize(105,-1);
        return helper(nums,0);
    }
};




// Tabulation(Bottom UP DP)--- Method 2

class Solution {
public:
    vector<int>dp;

    int rob(vector<int>& nums) {
        dp.resize(105,-1);
        int n = nums.size();
        if(n==1) return nums[0];
        dp[n-1] = nums[n-1];
        dp[n-2] = max(nums[n-1],nums[n-2]);
        for(int i=n-3; i>=0; i--){
            dp[i] = max(dp[i+1], nums[i]+dp[i+2]);
        }
        return dp[0];
    }
};