// Recursion + Memoization (TOP Down DP) --- Method 1 

class Solution {
public:
    
    vector<vector<int>>dp;
    int r = 0;
    int c = 0;

    int TopD(vector<vector<int>>& grid, int i, int j){
        if(i==r-1 && j==c-1) return 1;
        else if(i>=r || j>=c || i<0 || j<0) return 0;
        else if(grid[i][j] == 1) return 0;
        else if(dp[i][j] != -1) return dp[i][j];

        return dp[i][j] = TopD(grid,i+1,j) + TopD(grid,i,j+1);
    }

    int uniquePathsWithObstacles(vector<vector<int>>& grid){
        r = grid.size();
        c = grid[0].size();

        if(grid[r-1][c-1] == 1) return 0;
        dp.resize(100,vector<int>(100,-1));
        return TopD(grid,0,0);
    }
};

// Tabulation(Bottom UP DP)--- Method 2

