// Tabulation(Bottom UP DP)--- Method 1

class Solution {
public:
    string shortestCommonSupersequence(string a, string b) {
        int n = a.size();
        int m = b.size();

        int dp[n+1][m+1];
        for(int i=0; i<n+1; i++){
            for(int j=0; j<m+1; j++){
                if(i==0 || j==0) dp[i][j] = 0;
            }
        }

        for(int i=1; i<n+1; i++){
            for(int j=1; j<m+1; j++){
                if(a[i-1] == b[j-1]) dp[i][j] = 1 + dp[i-1][j-1];
                else dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
            }
        }

        string ans = "";
        int i = n;
        int j = m;
        while(i>0 && j>0){
            if(a[i-1]==b[j-1]){
                ans += a[i-1];
                i--,j--;
            }

            else {

                if(dp[i][j-1]>dp[i-1][j]){
                    ans+=b[j-1];
                    j--;
                }
                else{
                    ans+=a[i-1];
                    i--;
                }
            }
        }

        while(i>0){
            ans+=a[i-1];
            i--;
        }

        while(j>0){
            ans+=b[j-1];
            j--;
        }

        reverse(ans.begin(),ans.end());

        return ans;
    }
};

// Recursion + Memoization (TOP Down DP) --- Method 2

class Solution {
public:
    int dp[1001][1001];
    
    int helper(string &a, string &b, int n, int m){
        if(n==0 || m==0) return 0;
        if(dp[n][m]!=-1) return dp[n][m];
        if(a[n-1]==b[m-1]) return dp[n][m] = 1 + helper(a,b,n-1,m-1);
        return dp[n][m] = max(helper(a,b,n-1,m), helper(a,b,n,m-1));
    }

    string shortestCommonSupersequence(string a, string b) {
        memset(dp,-1,sizeof(dp));
        int n = a.size();
        int m = b.size();
        int size = helper(a,b,n,m);

        string ans = "";
        int i = n;
        int j = m;

        while(i>0 && j>0){
            if(a[i-1]==b[j-1]){
                ans += a[i-1];
                i--;
                j--;
            }
            else if(dp[i][j-1]>dp[i-1][j]){
                ans += b[j-1];
                j--;
            }
            else{
                ans += a[i-1];
                i--;
            }
        }

        while(i>0){
            ans += a[i-1];
            i--;
        }

        while(j>0){
            ans += b[j-1];
            j--;
        }

        reverse(ans.begin(),ans.end());
        return ans;
    }
};