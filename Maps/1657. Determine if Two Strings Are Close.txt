// 1st approach (Brute force)

class Solution {
public:
    bool closeStrings(string word1, string word2) {
        sort(word1.begin(),word1.end());
        sort(word2.begin(),word2.end());
        int n1 = word1.size();
        int n2 = word2.size();
        if(word1 == word2) return true;
        if(n1 != n2) return false;
        if(n1 == 1 && n2 == 1  && (word1 != word2)) return false;
        vector<int>v1;
        int c1 = 1;
        bool check = false;
        for(int i=1; i<n1; i++){
            if(word1[i]==word1[i-1]) c1++;
            else{
                for(int j=0; j<n2; j++){
                    if(word1[i]==word2[j]){
                        v1.push_back(c1);
                        check  = true;
                        break;
                    }
                }
                c1 = 1;
            }
        }
        if(check) v1.push_back(c1);
        vector<int>v2;
        c1 = 1;
        for(int i=1; i<n2; i++){
            if(word2[i]==word2[i-1]) c1++;
            else{
                v2.push_back(c1);
                c1 = 1;
            }
        }
        v2.push_back(c1);
        sort(v1.begin(),v1.end());
        sort(v2.begin(),v2.end());
        if(v1==v2) return true;
        return false;
    }
};

// 2nd approach (using hashmap)

class Solution {
public:
    bool closeStrings(string word1, string word2) {
        if(word1.size() != word2.size()) return false;
        unordered_map<char,int>m1;
        for(auto x: word1){
            m1[x]++;
        }

        unordered_map<char,int>m2;
        for(auto x: word2){
            m2[x]++;
        }

        for(auto x: m1){
            if(m2.find(x.first) == m2.end()) return false;
        }

        unordered_map<int,int>h1,h2;
        for(auto x: m1){
            h1[x.second]++;
        }

        for(auto x: m2){
            h2[x.second]++;
        }

        for(auto x: h1){
            if(h2.find(x.first)==h2.end()) return false;
            if(h1[x.first] != h2[x.first])return false;
        }

        return true;
    }
};