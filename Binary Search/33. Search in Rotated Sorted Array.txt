class Solution {
public:
    int search(vector<int>& nums, int target) {
        int n = nums.size();
        int hi = n-1;
        int lo = 0;
        if(n==2){
            if(target==nums[0]) return 0;
            else if(target==nums[1]) return 1;
            else return -1;
        }

        // Finding pivot
        int pi = -1;
        while(lo<=hi){
            int mid = (lo + hi)/2;
            if(mid==0) lo = mid+1;
            else if(mid==(n-1)) hi = mid-1;
            else if(nums[mid]<nums[mid-1] && nums[mid]<nums[mid+1]){
                pi = mid;
                break;
            }
            else if(nums[mid]>nums[mid-1] && nums[mid]>nums[mid+1]){
                pi = mid+1;
                break;
            }
            else if(nums[mid]<nums[hi]) hi = mid-1;
            else lo = mid+1;
        }

        // Setting the pointers 
        if(pi==-1){
            lo = 0;
            hi = n-1;
        }
        else if(nums[0]<=target && nums[pi-1]>=target){
            lo = 0;
            hi = pi-1;
        }
        else {
            lo = pi;
            hi = n-1;
        }

        // Applying normally B.S to find Target
        while(lo<=hi){
            int mid = (hi + lo)/2;
            if(nums[mid] == target) return mid;
            else if(nums[mid]<target) lo = mid+1;
            else hi = mid-1;
        } 

        return -1;
    }
};